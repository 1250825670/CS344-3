#!/bin/bash

function cleanup(){
	rm -f $tmprow
	rm -f $tmpMed
	rm -f $tmpAvg
	count=0
	while [[ $count < $numcols ]] #deletes temp column files
	do
		rm -f $$tmpcol$count
		count=`expr $count + 1`
	done
}

trap cleanup EXIT

echoerr() { echo "$@" 1>&2; }

#check if file or stdin
datafilepath="$$datafile"
if [ "$#" = "0" ]
then
	echoerr "./stats {-rows|-cols} [file]"
	exit 1
elif [ "$#" = "1" ]
then
	cat > "$datafilepath"
elif [ "$#" = "2" ]
then
	datafilepath=$2
	if [[ ! -e $datafilepath ]]
	then
		echoerr "./stats cannot read $datafilepath"
		exit 1
	elif [[ ! -r $datafilepath ]]
	then
		echoerr "./stats cannot read $datafilepath"
		exit 1
	elif [[ ! -d $datafilepath ]]
	then
		echoerr "./stats cannot read $datafilepath"
		exit 1
	elif [[ -s $datafilepath ]]
	then
		echoerr "./stats cannot read $datafilepath"
		exit 1
	fi
else
	echoerr "./stats {-rows|-cols} [file]"
	exit 1
fi

#make temp files
tmprow="$$temprow"
tmpAvg="$$tempAverage"
tmpMed="$$tempMedian"

#Code to calculate for rows
if [[ $1 == -r* ]]
then
	echo -e "Average\t\tMedian"
	while read i #reads all lines
	do
		sum=0
		count=0
		for num in $i
		do
			sum=`expr $sum + $num` #adds number to sum total
			echo "$num" >> $tmprow #saved into temp file for sorting
			count=`expr $count + 1`
		done
		
		avg=`expr $sum / $count` #finds average
		rem=`expr $sum % $count` #checks for a remainder
		if [ "$rem" -ge "`expr $count / 2`" ] #checks if number needs rounded up
		then
			avg=`expr $avg + 1`
		fi

		med=`expr $count / 2`	#finds place of median value
		med=`expr $med + 1`
		
		sort -n $tmprow -o $tmprow #sorts temp file

		tmpcnt=1
		while read num   #finds median
		do
			if [[ $tmpcnt == $med ]]
			then
				echo -e "$avg \t\t $num" #prints results
			fi
			tmpcnt=`expr $tmpcnt + 1`
		done < $tmprow
		rm -f $tmprow
	done < $datafilepath

#calculates column info
elif [[ $1 == -c* ]]
then
	numrows=0
	while read i  #saves each column to separate temp files and sorts each
	do
		numcols=0
		for num in $i
		do
			echo "$num" >> $$tmpcol$numcols
			sort -n $$tmpcol$numcols -o $$tmpcol$numcols
			numcols=`expr $numcols + 1`
		done
		numrows=`expr $numrows + 1`
	done < $datafilepath

	med=`expr $numrows / 2`
	med=`expr $med + 1`		#finds place of median value
	count=0
	while [[ $count < $numcols ]]
	do
		sum=0
		tmpcnt=1
		while read line
		do
			sum=`expr $sum + $line` #sums all values from column
			if [[ $med == $tmpcnt ]]  #finds median value
			then
				#add medians to temp file
				echo -e $line >> $tmpMed
			fi
			tmpcnt=`expr $tmpcnt + 1`
		done < $$tmpcol$count
		avg=`expr $sum / $numrows` #finds average
		rem=`expr $sum % $numrows` #checks for a remainder
		if [ "$rem" -ge "`expr $numrows / 2`" ] #checks if number needs rounded up
		then
			avg=`expr $avg + 1`
		fi
		#adds averages to temp file
		echo -e $avg >> $tmpAvg
		count=`expr $count + 1`
	done

	echo "Averages:"
	while read avg		#prints averages
	do
		echo -e -n "$avg\t"
	done < $tmpAvg
	echo -e "\n"
	
	echo "Medians:"
	while read med		#prints medians
	do
		echo -e -n "$med\t"
	done < $tmpMed
	echo -e "\n"

	count=0
	while [[ $count < $numcols ]] #deletes temp column files
	do
		rm -f $$tmpcol$count
		count=`expr $count + 1`
	done
	rm -f $tmpAvg
	rm -f $tmpMed
else
	echoerr "./stats {-rows|-cols} [file]"
	exit 1
fi

exit 0